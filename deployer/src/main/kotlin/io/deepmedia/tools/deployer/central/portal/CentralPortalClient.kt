package io.deepmedia.tools.deployer.central.portal

import com.android.tools.r8.internal.Bo
import io.ktor.client.*
import io.ktor.client.call.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.*
import io.ktor.client.plugins.contentnegotiation.*
import io.ktor.client.request.*
import io.ktor.client.request.forms.*
import io.ktor.http.*
import io.ktor.serialization.kotlinx.json.*
import io.ktor.util.*
import io.ktor.util.cio.*
import io.ktor.utils.io.*
import io.ktor.utils.io.core.*
import io.ktor.utils.io.jvm.javaio.*
import io.ktor.utils.io.streams.*
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.JsonObject
import org.gradle.api.file.Directory
import java.io.File

/**
 * https://central.sonatype.org/publish/publish-portal-api/#verify-status-of-the-deployment
 *
 * PENDING: A deployment is uploaded and waiting for processing by the validation service
 * VALIDATING: A deployment is being processed by the validation service
 * VALIDATED: A deployment has passed validation and is waiting on a user to manually publish via the Central Portal UI
 * PUBLISHING: A deployment has been either automatically or manually published and is being uploaded to Maven Central
 * PUBLISHED: A deployment has successfully been uploaded to Maven Central
 * FAILED: A deployment has encountered an error (additional context will be present in an errors field)
 */
@Serializable
internal data class CentralPortalDeployment(
    val deploymentId: String,
    val deploymentState: String,
    val errors: JsonElement? = null
)

internal class CentralPortalClient {

    private val json = Json {
        ignoreUnknownKeys = true
        isLenient = true
    }

    private val http = HttpClient(CIO) {
        engine {
            requestTimeout = 0
        }
        defaultRequest {
            url("https://central.sonatype.com/api/v1/")
        }
        expectSuccess = true
        install(ContentNegotiation) {
            json(json)
        }
    }

    // https://ktor.io/docs/client-requests.html#upload_file
    // https://central.sonatype.org/publish/publish-portal-api/#uploading-a-deployment-bundle
    suspend fun createDeployment(info: CentralPortalInfo, file: File): String {
        return http.post("publisher/upload") {
            bearerAuth("${info.username}:${info.password}".encodeBase64())
            parameter("name", "Auto-generated by MavenDeployer Gradle plugin.")
            parameter("publishingType", if (info.allowSync) "AUTOMATIC" else "USER_MANAGED")

            setBody(MultiPartFormDataContent(formData {
                val size = file.length()
                val provider = ChannelProvider(size) { file.readChannel() }
                append(
                    key = "bundle",
                    value = provider,
                    headers = Headers.build {
                        this[HttpHeaders.ContentDisposition] = "filename=${file.name.escapeIfNeeded()}"
                        this[HttpHeaders.ContentType] = ContentType.Application.OctetStream.toString()
                    }
                )
                // This requires a readBytes()
                /* append(
                    key = "bundle",
                    filename = file.name,
                    contentType = ContentType.Application.OctetStream,
                    size = size,
                    bodyBuilder = { writeFully(file.readBytes()) }
                ) */
            }))
        }.body()
    }

    suspend fun getDeployment(info: CentralPortalInfo, deploymentId: String): CentralPortalDeployment {
        return http.post("publisher/status") {
            parameter("id", deploymentId)
            bearerAuth("${info.username}:${info.password}".encodeBase64())
        }.body()
    }

    /**
     * Can be called when deployment status is FAILED or VALIDATED.
     */
    suspend fun deleteDeployment(info: CentralPortalInfo, deploymentId: String) {
        http.delete("publisher/deployment/$deploymentId") {
            bearerAuth("${info.username}:${info.password}".encodeBase64())
        }
    }

}